/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.15
 * Generated at: 2017-07-26 09:40:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.sql.*;
import com.test.common.DBConn;
import com.test.DTO.BoardInfo;

public final class board_005fupdate_005fok_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {



public void printStr(String str){
	System.out.println("dd");
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/common/header.jsp", Long.valueOf(1501059482908L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.test.common.DBConn");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("com.test.DTO.BoardInfo");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write('\r');
      out.write('\n');

String userId = (String) session.getAttribute("userid");
String userName = "";
int age = 0;
String address = "";
String hp1 = "";
String hp2 = "";
String hp3 = "";
boolean login = false;
if(userId!=null){
	userName = (String) session.getAttribute("username");
	age = (int) session.getAttribute("age");
	address = (String) session.getAttribute("address");
	hp1 = (String) session.getAttribute("hp1");
	hp2 = (String) session.getAttribute("hp2");
	hp3 = (String) session.getAttribute("hp3");
	login = true;
}
String rootPath = request.getContextPath();    //path가 무슨이름이건 거기잇는걸 가져온다.
Date toDate = new Date();
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");
String toDateStr = sdf.format(toDate);

      out.write("\r\n");
      out.write("<script src=\"");
      out.print(rootPath);
      out.write("/js/jquery-3.2.1.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("var rootPath = \"");
      out.print(rootPath);
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("function doBoardMove(pageId,bNum){\r\n");
      out.write("\tvar url = \"\";\r\n");
      out.write("\tif(pageId==\"board\"){\r\n");
      out.write("\t\turl = rootPath + \"/board/board_select.jsp\";\r\n");
      out.write("\t}else if(pageId==\"main\"){\r\n");
      out.write("\t\turl = rootPath + \"/\";\r\n");
      out.write("\t}else if(pageId==\"boardInsert\"){\r\n");
      out.write("\t\turl = rootPath + \"/board/board_insert.jsp\";\r\n");
      out.write("\t}else if(pageId==\"boardUpdate\",bNum){\r\n");
      out.write("\t\turl = rootPath + \"/board/board_update.jsp?boardnum=\" + bNum;\r\n");
      out.write("\t}\r\n");
      out.write("\tlocation.href = url;\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");

int boardnum = Integer.parseInt(request.getParameter("boardnum"));
String boardtitle = request.getParameter("boardtitle");
String boardcontent = request.getParameter("boardcontent");
String boardpwd = request.getParameter("boardpwd");
int result = 0;
String message = "수정이 안됬어요!";

if(boardtitle!=null && boardcontent!=null && boardpwd!=null){
	BoardInfo bi = new BoardInfo();
	bi.setBoardNum(boardnum);
	bi.setBoardTitle(boardtitle);
	bi.setBoardContent(boardcontent);
	bi.setBoardPwd(boardpwd);
	
	Connection con = null;
	PreparedStatement ps = null;
	ResultSet rs = null;
	try{
		con = DBConn.getCon();
		String sql = "update board_info set boardtitle=?,boardcontent=?,boardpwd=? where boardnum=?;";
	
		ps = con.prepareStatement(sql);
		ps.setString(1, bi.getBoardTitlem());
		ps.setString(2, bi.getBoardContent());
		ps.setString(3, bi.getBoardPwd());
		ps.setInt(4, bi.getBoardNum());
		rs = ps.executeQuery();
		while(rs.next()){
			String bPwd = rs.getString("boardpwd");
			if(bi.getBoardPwd().equals(bPwd)){
				if(result==1){
					message = "수정이 완료되었습니다.";
					con.commit();
				}
			}
		}
	
}catch(SQLException | ClassNotFoundException e){
	try{
		con.rollback();
	}catch(SQLException e1){
		e1.printStackTrace();
	}
	e.printStackTrace();
}finally{
	try{
		ps.close();
		DBConn.closeCon();
	}catch(SQLException e){
		e.printStackTrace();
	}
}

}

      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("alert(\"");
      out.print(message);
      out.write("\");\r\n");
      out.write("location.href= \"");
      out.print(rootPath);
      out.write("\" + \"/board/board_select.jsp\";\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
